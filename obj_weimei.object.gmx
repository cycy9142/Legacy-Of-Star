<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_weimei_a_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_hero</parentName>
  <maskName>spr_hero_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///이동 관련 변수 선언

//캐릭터 기본 마찰력
//딛고 있는 부분의 마찰력과 합산
ground_h_fric = 5;

//캐릭터 최대 속도
move_h_max = 5;
move_v_max = 7;

//캐릭터 이동 속도 (1초 기준)
//마찰력의 영향을 받음
ground_h_acc = 30;
air_h_acc = 4;

//캐릭터 점프력
ground_jump_power = 10;



look_dir = 1;

move_h_spd = 0;
move_v_spd = 0;

key_L = false;
key_R = false;

ground_on = false;
ground_on_check = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///기본 능력치 관련 변수 선언

hero_hp_max = 100;
hero_hp = 100;
hero_mp_max = 6;
hero_mp = 6;

hero_dmg = 10;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///모션 관련 변수 선언
spr_t_name = 0;
spr_b_name = spr_weimei_a_idle;

spr_t_index = 0;
spr_b_index = 0;

spr_t_sync = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///공격 관련 변수 선언
shot_bullet_max = 15;
shot_bullet = 15;

shot_delay = 5;
shot_delay_val = 0;
shot_reload_delay = 40;
shot_reload_delay_val = -10;

roll_delay = 40;
roll_delay_val = 0;
roll_speed = 7;
roll_dir = 0;


skill_a_on = false;
skill_a_cool_time = 720;
skill_a_cool_val = 0;
skill_a_duration = 300;

skill_s_on = false;
skill_s_cool_time = 45;
skill_s_cool_val = 0;
skill_s_duration = 600;

skill_d_on = false;
skill_d_cool_time = 45;
skill_d_cool_val = 0;

skill_f_on = false;
skill_f_cool_time = 45;
skill_f_cool_val = 0;

hit_dmg = 0;
knock_power = 0;
inv_time = 60;
inv_val = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///기타 

obj_step.hp_inst = self.id;

robot_inst = instance_create(x, y - 150, obj_robot);
robot_inst.hero_id = self.id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (robot_inst)
{
    instance_destroy();
};
  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///이동 관련
if( g.game_spd_val &gt; 0 )
{
    fric_temp = ground_h_fric;
    col_temp = collision_rectangle(bbox_left, bbox_bottom, bbox_right, bbox_bottom+2, obj_col_parant, true, true);
    if (col_temp != noone)
    {
        ground_on = true;
        fric_temp += col_temp.friction;
    }
    else
    {
        ground_on = false;
    }
    fric_temp = max(0, fric_temp);
    
    
    key_L = keyboard_check(vk_left);
    
    key_R = keyboard_check(vk_right);
    
    if (key_L + key_R == 1) look_dir = -key_L + key_R;
    
    move_h_spd += (key_R - key_L) * min( fric_temp , (ground_h_acc * ground_on) + (air_h_acc * !ground_on) ) / room_speed * g.game_spd_val;
    
    if (abs(move_h_spd) &gt; move_h_max) move_h_spd = sign(move_h_spd) * move_h_max;
    
    
    if (!(key_L xor key_R) and move_h_spd != 0) 
    {
        if (fric_temp != 0) 
        {
            fric_temp = fric_temp / room_speed * g.game_spd_val * sign(move_h_spd)
            move_h_spd -= fric_temp;
            if(abs(move_h_spd) &lt; fric_temp) move_h_spd = 0;
        }
    }
    if( roll_delay_val &lt;= 0 )
    {
        if( place_free(x + move_h_spd * g.game_spd_val, y) )
        {
            x += move_h_spd * g.game_spd_val;
        }
        else
        {
            move_contact_solid(90 - 90 * sign(move_h_spd), move_h_spd * g.game_spd_val);
            move_h_spd = 0;
        }
    }
    
    
    if(!ground_on) move_v_spd += g.grav_lev / room_speed * g.game_spd_val;
    
    
    if (keyboard_check_pressed(vk_space) &amp;&amp; ground_on)
    {
        ground_on = false;
        
        move_v_spd = -ground_jump_power;
        
        roll_delay_val = 0;
    }
    
    if (place_free(x, y + move_v_spd * g.game_spd_val))
    {
        y += move_v_spd * g.game_spd_val;
    }
    else
    {
        move_contact_solid(180 + 90 * sign(move_v_spd), move_v_spd * g.game_spd_val);
        move_v_spd = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///카메라 

view_xview[0] = floor(x - view_wview[0]/2);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///공격 관련 

//구르기  
if( keyboard_check_pressed(ord('C')) &amp;&amp; g.game_spd_val &gt; 0 )
{
    //공중 검사 
    if( ground_on )
    {
        //딜레이 검사
        if( roll_delay_val &lt;= 0 )
        {
            //모션 변경
            spr_t_name = 0;
            spr_t_index = 0;
            spr_b_name = spr_weimei_a_roll;
            spr_b_index = 0;
            //딜레이 설정
            roll_delay_val = roll_delay;
            roll_dir = look_dir;
        }
    }
}


//총 쏘기
if( keyboard_check_pressed(ord('X')) &amp;&amp; g.game_spd_val &gt; 0 )
{
    //스킬 사용 검사
    if( !skill_a_on &amp;&amp; !skill_s_on &amp;&amp; !skill_d_on &amp;&amp; !skill_f_on)
    {
        //기술 사용 검사 
        if( spr_b_name != spr_weimei_a_roll)
        {
            //딜레이 검사
            if( shot_delay_val &lt;= 0 )
            {
                if( shot_bullet &gt; 0 )
                {
                    //총알 감소
                    shot_bullet -= 1;
                    shot_delay_val = shot_delay;
                    //모션 변경
                    spr_t_name = spr_weimei_t_shot;
                    spr_t_index = 0;
                    if( spr_b_name == spr_weimei_a_idle ) 
                    {
                        spr_b_name = spr_weimei_b_idle;
                        spr_b_index = 0;
                    }
                    //소리 재생 
                    audio_play_sound(sound0_pistol_shoot, 0, false);
                    //총알 발사 
                    inst = instance_create(x+(60*look_dir), y-85, obj_hero_bullet);
                    inst.direction = 90 + (-90*look_dir);
                    inst.dmg = hero_dmg;
                    if( robot_inst.sprite_index == spr_robot_skill2_scan )         
                        inst.dmg = hero_dmg*2;
                    inst = instance_create(x+(60*look_dir), y-85, obj_bullet_ef);
                    inst.image_angle = 90 + (-90*look_dir);
                    //잔여 총알 검사 
                    if( shot_bullet == 0 )
                    {
                        shot_reload_delay_val = shot_reload_delay;
                    }
                }
            }
        }
    }
}

if( shot_delay_val &gt; 0 ) shot_delay_val -= g.game_spd_val;

if( shot_reload_delay_val != -10 )
{
    if( shot_reload_delay_val &gt; 0 ) {
        shot_reload_delay_val -= g.game_spd_val;
    }else{
        shot_reload_delay_val = -10;
        shot_bullet = shot_bullet_max;
    }

}


if( hit_dmg &gt; 0 )
{
    if( inv_val &gt; 0 || roll_delay_val &gt; 0 )
    {
        hit_dmg = 0;
        knock_power = 0;
    }
    else
    {
        inv_val = inv_time;
        hero_hp -= hit_dmg;
        
        move_h_spd += knock_power;
        move_v_spd -= abs(knock_power);
        
        inst = instance_create(x, mean(bbox_top, bbox_bottom), obj_dmg);
        inst.h_spd = inst.h_spd * sign(knock_power);
        inst.dmg = hit_dmg;
        inst.target_is_enemy = false;
        
        hit_dmg = 0;
        knock_power = 0;
    }
}

if( inv_val &gt; 0 ) {
    inv_val -= g.game_spd_val;
}


if( hero_hp &lt;= 0 )
{
    inst = instance_create(x, y, obj_weimei_die);
    inst.move_h_spd = move_h_spd;
    inst.move_v_spd = move_v_spd;
    inst.image_xscale = image_xscale;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///스킬 관련
//A 스킬 관련

if( skill_a_cool_val &lt;= 0 )
{
    if( keyboard_check_pressed(ord('A')) &amp;&amp; ground_on &amp;&amp; g.game_spd_val &gt; 0)
    {
        if( robot_inst.sprite_index == spr_robot_idle1 )
        {
            if( skill_f_on )
            {
                skill_f_on = false;
                skill_f_cool_val = skill_f_cool_time;
                skill_a_cool_val = skill_a_cool_time;
                robot_inst.skill_a_val = skill_a_duration;
                robot_inst.skill_af_duration = skill_a_duration;
                robot_inst.sprite_index = spr_robot_skill3;
                robot_inst.image_index = 0;
            }
            else
            {
                audio_play_sound(sound2_R_Skill1, 0, false);
                skill_a_cool_val = skill_a_cool_time;
                robot_inst.skill_a_val = skill_a_duration;
                robot_inst.sprite_index = spr_robot_skill1;
                robot_inst.image_index = 0;
            }
        }
    }
    
}
else
{
    skill_a_cool_val -= g.game_spd_val;
}

//S 스킬 관련

if( skill_s_cool_val &lt;= 0 )
{
    if( keyboard_check_pressed(ord('S')) &amp;&amp; ground_on &amp;&amp; g.game_spd_val &gt; 0)
    {
        if( robot_inst.sprite_index == spr_robot_idle1 )
        {
            if( skill_f_on )
            {
                skill_f_on = false;
                skill_f_cool_val = skill_f_cool_time;
                skill_s_cool_val = skill_s_cool_time;
                robot_inst.skill_s_val = skill_s_duration;
                robot_inst.skill_sf_duration = skill_s_duration;
                robot_inst.sprite_index = spr_robot_skill3;
                robot_inst.image_index = 0;
            }
            else
            {
                skill_s_cool_val = skill_s_cool_time;
                robot_inst.skill_s_val = skill_s_duration;
                robot_inst.sprite_index = spr_robot_skill2;
                robot_inst.image_index = 0;
            }
        }
    }
    
}
else
{
    skill_s_cool_val -= g.game_spd_val;
}

//F 스킬 관련

if( skill_f_cool_val &lt;= 0 )
{
    if( keyboard_check_pressed(ord('F')) &amp;&amp; ground_on &amp;&amp; g.game_spd_val &gt; 0)
    {
        skill_f_on = !skill_f_on;
    }
}
else
{
    skill_f_cool_val -= g.game_spd_val;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///구르기 
if( roll_delay_val &gt; 0 )
{
    roll_delay_val -= g.game_spd_val;
    if (place_free(x + ((roll_speed * roll_dir) + (move_h_spd * 0.3)) * g.game_spd_val, y))
    {
        x += ((roll_speed * roll_dir) + (move_h_spd * 0.3)) * g.game_spd_val;
    }
    else
    {
        move_contact_solid(90 - 90 * sign(roll_dir), roll_speed * roll_dir * g.game_spd_val);
        move_h_spd = 0;
    }
    
    look_dir = roll_dir;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///모션 관련 (BOTTOM, ALL)

if( ground_on )
{
    if( roll_delay_val &lt;= 0 )
    {
        if( move_h_spd == 0 )
        {
            if( spr_b_name != spr_weimei_a_idle )
            {
                if( spr_t_name != spr_weimei_t_shot ) //다른 동작 중이 아니라면 
                {
                    spr_t_name = 0; 
                    spr_t_sync = 0;
                    spr_b_name = spr_weimei_a_idle;
                    spr_b_index = 0;
                }
                else
                {
                    spr_b_name = spr_weimei_b_idle;
                    spr_b_index = 0;
                }
            }
            else
            {
                spr_b_index += g.game_spd_val;
                if( spr_b_index &gt;= sprite_get_number(spr_b_name) ) 
                    spr_b_index -= sprite_get_number(spr_b_name);
            }
        }
        else
        {
            if( spr_b_name != spr_weimei_b_run) 
            {
                if( spr_t_name != spr_weimei_t_shot ) //다른 동작중이 아니라면 
                {
                    spr_t_name = spr_weimei_t_move; 
                    spr_t_index = 0;
                    spr_t_sync = 0;
                }
                spr_b_name = spr_weimei_b_run;
                spr_b_index = 0;
            }
            else
            {
                spr_b_index += g.game_spd_val;
                if( spr_b_index &gt;= sprite_get_number(spr_b_name) ) 
                    spr_b_index -= sprite_get_number(spr_b_name);
                if( spr_t_name == spr_weimei_t_move )
                    spr_t_index = spr_b_index;
                spr_t_sync = cos(degtorad((spr_b_index mod 20) * 18)) * 4;
            }
        }
    }
    else
    {
        spr_b_index += g.game_spd_val;
    }
}
else
{
    if( spr_b_name != spr_weimei_b_jump )
    {
        if( spr_t_name != spr_weimei_t_shot ) //다른 동작중이 아니라면 
        {
            spr_t_name = spr_weimei_t_move;
            spr_t_index = 0;
            spr_t_sync = 0;
        }
        spr_b_name = spr_weimei_b_jump;
        spr_b_index = 0;
    }
    else
    {
        if( spr_b_index &lt; sprite_get_number(spr_b_name) - 1 ) 
            spr_b_index += g.game_spd_val * 0.5;
        spr_t_sync = (move_v_spd / move_v_max) * 3;
    }
}


if( inv_val &gt; 0 ) temp_alpha = 0.4 + ((inv_val mod 15) * 0.03);
    else temp_alpha = 1;
draw_sprite_ext(spr_b_name, spr_b_index, x, y, look_dir, 1, 0, c_white, temp_alpha);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///모션 관련 (TOP)



if( spr_t_name != 0 )
{
    if( inv_val &gt; 0 ) temp_alpha = 0.4 + ((inv_val mod 15) * 0.03);
        else temp_alpha = 1;
    draw_sprite_ext(spr_t_name, spr_t_index, x, y + spr_t_sync, look_dir, 1, 0, c_white, temp_alpha);
    
    spr_t_index += g.game_spd_val;
    
    if( spr_t_index &gt;= sprite_get_number(spr_t_name) )
    {
        if( spr_t_name == spr_weimei_t_shot)
        {
            if( spr_b_name == spr_weimei_a_idle )
            {
                spr_t_name = 0;
            }
            else if( spr_b_name == spr_weimei_b_idle )
            {
                spr_t_name = 0;
                spr_b_name = spr_weimei_a_idle;
                spr_b_index = 0;
            }
            else if( spr_b_name == spr_weimei_b_run )
            {
                spr_t_name = spr_weimei_t_move;
                spr_t_index = spr_b_index;
            }
            else if( spr_b_name == spr_weimei_b_jump )
            {
                spr_t_name = spr_weimei_t_move;
                spr_t_index = 0;
            }
        } 
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
