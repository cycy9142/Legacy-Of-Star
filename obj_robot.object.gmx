<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_robot_idle1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///이동 관련

hero_id = 0;

target_x = 0;
target_y = 0;
target_x_range = 50;

levi_cycle = 80;
levi_val = 0;
levi_len = 30;

move_h = 0;
move_v = 0;

move_x_val = 0.05;
move_y_val = 0.1;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///공격 관련


skill_a_val = 0;
skill_a_intv = 5;
skill_a_intv_val = 0;
skill_a_intv_check = 0;
skill_a_range = 600;
skill_a_dmg = 2;
skill_af_duration = 0;
skill_af_dmg = 22;
skill_af_intv = 50;

skill_s_val = 0;
skill_sf_dmg = 22;
skill_sf_duration = 0;
skill_sf_atk_on = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inst = instance_create(x, y, obj_robot_die);
inst.move_h_spd = move_h * move_x_val;
inst.move_v_spd = move_v * move_y_val;
inst.image_xscale = image_xscale;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///이동
image_speed = g.game_spd_val;

if( hero_id != 0 )
{
    if( sprite_index == spr_robot_idle1 or
        sprite_index == spr_robot_skill2_scan or
        sprite_index == spr_robot_skill2)
    {
        levi_val += g.game_spd_val;
        if( levi_val &gt; levi_cycle ) levi_val -= levi_cycle;
    
        target_x = hero_id.x;
        target_y = hero_id.bbox_top + ( sin( 2*pi*(levi_val/levi_cycle) ) * levi_len );
        
        image_xscale = sign(hero_id.look_dir);
    }
    move_h = max( 0, abs(target_x - x) - target_x_range ) * sign( target_x - x );
    move_v = target_y - y;
    
    if( skill_a_val &gt; 0 )
    {
        x += move_h * move_x_val * 10;
        y += move_v * move_y_val;
    }
    else
    {
        x += move_h * move_x_val;
        y += move_v * move_y_val;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///스킬

if( skill_a_val &gt; 0 )
{
    if( sprite_index = spr_robot_skill1_shoot )
    {
        skill_a_val -= g.game_spd_val;
        
        skill_a_intv_check += g.game_spd_val;
        if( skill_a_intv_check &gt; skill_a_intv_val )
        {
            if( audio_is_playing(sound1_W_Skill1) ) audio_stop_sound( sound1_W_Skill1 );
            audio_play_sound(sound1_W_Skill1, 0, false);
            skill_a_intv_val += skill_a_intv;
            inst = instance_create(x, y, obj_robot_attack);
            inst.image_xscale = image_xscale;
            inst.dmg = skill_a_dmg;
            inst.range = skill_a_range;
        }
        
        if( skill_a_val &lt;= 0 )
        {
            sprite_index = spr_robot_skill1_end;
        }
    }
    else if( sprite_index == spr_robot_skill3 )
    {
        target_x = hero_id.x - (skill_a_range * 0.5 * image_xscale);
        target_y = hero_id.y - 250;
        skill_a_intv_val = 0;
        skill_a_intv_check = 0;
    }
    else if( sprite_index == spr_robot_skill3_boom )
    {
        skill_a_val -= g.game_spd_val;
        
        target_x += image_xscale * skill_af_duration / room_speed * g.game_spd_val;
        skill_a_intv_check += skill_af_duration / room_speed * g.game_spd_val;
        if( skill_a_intv_check &gt; skill_a_intv_val )
        {
            skill_a_intv_val += skill_af_intv;
            inst_boom = instance_create(x, y, obj_robot_boom);
            inst_boom.image_xscale = image_xscale;
            inst_boom.dmg = skill_af_dmg;
        }
        if( skill_a_intv_check &gt;= skill_a_range or
            skill_a_val &lt;= 0 )
        {
            skill_a_val = 0;
            sprite_index = spr_robot_skill3_end;
        }
    }
}

if( skill_s_val &gt; 0 )
{
    if( sprite_index = spr_robot_skill2_scan )
    {
        skill_s_val -= g.game_spd_val;
        
        if( skill_s_val &lt;= 0 )
        {
            sprite_index = spr_robot_skill2_end;
        }
    }
    else if( sprite_index == spr_robot_skill3 )
    {
        target_x = hero_id.x;
        target_y = hero_id.y - 250;
        skill_sf_atk_on = false;
    }
    else if( sprite_index == spr_robot_skill3_boom )
    {
        skill_s_val -= g.game_spd_val;
        
        if( !skill_sf_atk_on ) 
        {
            skill_sf_atk_on = true;
            inst_wall = instance_create(x, y, obj_wall);
            inst_wall.dmg = skill_sf_dmg;
            inst_wall.duration = skill_sf_duration;
        }
        
        if( skill_s_val &lt;= 0 )
        {
            sprite_index = spr_robot_skill3_end;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( sprite_index == spr_robot_skill1 ) sprite_index = spr_robot_skill1_shoot;
if( sprite_index == spr_robot_skill1_end ) sprite_index = spr_robot_idle1;
if( sprite_index == spr_robot_skill2 ) sprite_index = spr_robot_skill2_scan;
if( sprite_index == spr_robot_skill2_end ) sprite_index = spr_robot_idle1;
if( sprite_index == spr_robot_skill3 ) sprite_index = spr_robot_skill3_boom;
if( sprite_index == spr_robot_skill3_end ) sprite_index = spr_robot_idle1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
